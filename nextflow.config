manifest {
    name = 'Annotation of unclassified TEs'
    author = 'Wenbo Xu; Mahesh Binzer-Panchal'
    homePage = ''
    description = """In recently sequenced non-model organisms, repeat discovery tools often fail
    to classify a large portion of their repeats. These unclassified repeats can be host genes
    that were duplicated or TEs that are just not present in the databases. It is misleading if
    host genes are included in TE analyses.

    RepeatDefeaters provides a transparent set of rules on what should be considered host or TEs.
    A critical task during repeat discovery is to accurately annotate transposable elements (TEs),
    which can be challenging for new organisms. RepeatDefeaters aims to provide an easy-to-follow
    guide on how to tackle these sequences, that are difficult to classify automatically."""
    mainScript = 'main.nf'
    // Update nextflowVersion to determine which versions of nextflow can be used.
    // '!>=21.04.0' : Only run with version 21.04.0 or higher, otherwise exit.
    nextflowVersion = '!>=21.04.0'
    version = '1.0'
}

// Default Workflow parameters
// Override parameters in a params.config or as command line parameters to the workflow.
params {

    // Workflow inputs
    // Repeat modeler library
    repeat_modeler_fasta = ''
    // Species short name for renaming sequences
    species_short_name = ''

    // Workflow outputs
    // Results directory
    results = 'results'

    // Workflow assets
    // protein reference
    protein_reference = 'https://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz'
    // Path to key words (Describes PFAM entries with TE domains)
    transposon_keywords = "$projectDir/assets/pfam_te_domain_keywords.txt"
    // Path to key words blacklist (Describes PFAM entries with TE domains that should be removed)
    transposon_blacklist = "$projectDir/assets/te_domain_keyword_blacklist.txt"
    // Path to PFAM accession list of proteins with TE domains (skips PFAM_TRANSPOSIBLE_ELEMENT_SEARCH process)
    pfam_proteins_with_te_domain_list = ''
    // pfam_proteins_with_te_domain_list = "$projectDir/assets/Pfam_R32.Proteins_wTE_Domains.seqid"
    // PFAM HMM database path
    pfam_hmm_db  = 'ftp://ftp.ebi.ac.uk/pub/databases/Pfam/releases/Pfam32.0/Pfam-A.hmm.gz'
    pfam_hmm_dat = 'ftp://ftp.ebi.ac.uk/pub/databases/Pfam/releases/Pfam32.0/Pfam-A.hmm.dat.gz'
    // PFAM-A database path
    pfam_a_db = 'ftp://ftp.ebi.ac.uk/pub/databases/Pfam/releases/Pfam32.0/Pfam-A.full.uniprot.gz'
    // TREP database
    trep_db = 'http://botserv2.uzh.ch/kelldata/trep-db/downloads/trep-db_nr_Rel-19.fasta.gz'
    // Custom HMM files
    custom_hmms = "$projectDir/Libraries/HMMs/all.hmm.gz"

    // Workflow package manager configuration
    // Use conda instead of containers
    enable_conda = false
}

profiles {

    // A custom profile for the Uppmax clusters
    uppmax {
        // UPPMAX project - Needed only when submitting jobs to an UPPMAX cluster
        params.project = ''
        process {
            executor = 'slurm'
            clusterOptions = "-A $params.project"
            // Use node local storage for execution.
            scratch = '$SNIC_TMP'
        }
        // Specify resources to use.
        includeConfig "$projectDir/configs/compute_resources.config"
        // Specify singularity containers to use.
        singularity.enabled = true
        singularity.envWhitelist = 'SNIC_TMP'
    }

    // A profile for running locally with Docker
    docker_local {
        process {
            executor = 'local'
            scratch = true
        }
        includeConfig "$projectDir/configs/compute_resources.config"
        docker.enabled = true
        docker.userEmulation = true
    }

    // A profile for running locally with Singularity
    // (e.g., using an interactive Uppmax session)
    singularity_local {
        process {
            executor = 'local'
            scratch = '$SNIC_TMP'
        }
        includeConfig "$projectDir/configs/compute_resources.config"
        singularity.enabled = true
        singularity.envWhitelist = 'SNIC_TMP'
    }

   execution_report {
        timeline {
            enabled = true
            file = "${params.results}/pipeline_info/execution_timeline.html"
        }
        report {
            enabled = true
            file = "${params.results}/pipeline_info/execution_report.html"
        }
        trace {
            enabled = true
            file = "${params.results}/pipeline_info/execution_trace.txt"
        }
        dag {
            enabled = true
            file = "${params.results}/pipeline_info/pipeline_dag.svg"
        }
    }

}

// Load process specific configuration
includeConfig "configs/modules.config"

